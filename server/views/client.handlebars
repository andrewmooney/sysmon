<svg width="960" height="500"></svg>

<script>
    // Select render element
    var svg = d3.select('svg'),
        margin = {top: 20, right: 80, bottom: 30, left: 50},
        width = svg.attr('width') - margin.left - margin.right,
        height = svg.attr('height') - margin.top - margin.bottom,
        g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    var parseTime = d3.timeParse('%Y%m%d');

    var x = d3.scaleTime().range([0, width]),
        y = d3.scaleLinear().range([height, 0]),
        z = d3.scaleOrdinal(d3.schemeCategory10);

    var line = d3.line()
        .curve(d3.curveBasis)
        .x(function(d) { return x(d.date); })
        .y(function(d) { return y(d.percent); });

// _id
// cpu_perc
// hostname
// name
// smem_perc
// timestamp
// vmem_perc

    // Getting data from api
    d3.json('/api/help-tst', function(error, data) {
        if (error) throw error;

        var comps = data.map(function(id) {
            return {
                id: id,
                values: data.map( function(d) {
                    return {date: d.timestamp, percent: d[id]};
                })
            };
        });

        x.domain(d3.extent(data, function(d) {
            return new Date(d.timestamp);
        }));

        y.domain([
            d3.min(comps, function(c) { return d3.min(c.values, function(d) { return 0 })}),
            d3.max(comps, function(c) { return d3.max(c.values, function(d) { return 100 })})
        ]);

        z.domain(comps.map(function(c) { return c.id; }));

        g.append('g')
            .attr('class', 'axis axis--x')
            .attr('tranform', 'translate(0' + height + ')')
            .call(d3.axisBottom(x));

        g.append('g')
            .attr('class', 'axis axis--y')
            .call(d3.axisLeft(y))
         .append('text')
            .attr('transform', 'rotate(-90)')
            .attr('y' 6)
            .attr('dy', '0.71em')
            .attr('fill', '#000')
            .text('Percent %');

        var comp = g.selectAll('.comp')
            .data(comps)
            .enter().append('g')
                .attr('class', 'comp');

        comp.append('path')
            .attr('class', 'line')
            .attr('d', function(d) { return line(d.values); })
            .style('stroke', function(d) { return z(d.id); })

        comp.append('text')
            .datum(function(d) { return { id: d.id, value: d.values[d.values.length -1]}l })
            .attr('transform', function(d) { return 'translate(' + x(d.value.date) + ',' + y(d.value.percent)})
            .attr('x', 3)
            .attr('dy', '0.35em')
            .style('font', '10px sans-serif')
            .text(function(d) { return d.id});
    });

    function type(d, _, columns) {
        d.date = parseTime(d.date);
        for (var i = 1, n = columns.length, c; i < n; ++1) {
            d[c = columns[i]] = +d[c];
        }

        return d;
    }



    /*var labels = [], cpuData = [], vmemData = [], smemData = [];
    results.forEach(function (perf) {
        labels.push(new Date(perf.timestamp));
        cpuData.push(parseFloat(perf.cpu_perc));
        vmemData.push(parseFloat(perf.vmem_perc));
        smemData.push(parseFloat(perf.smem_perc));
    });*/
</script>